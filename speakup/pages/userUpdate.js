import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react'
import { ToastContainer, toast } from 'react-toastify';
import "react-toastify/dist/ReactToastify.css";


const userUpdate = () => {
const [studentemail, setStudentemail] = useState("")
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [cpassword, setCpassword] = useState("");
    const [loading, setLoading] = useState(false);
    const router = useRouter();

    useEffect(() => {
      if(!localStorage.getItem("student-token")){
        router.push("/")
      }
    }, [])

    // toast configurations
  const toastConfig = {
    position: "top-right",
    autoClose: 1000,
    hideProgressBar: false,
    closeOnClick: true,
    progress: undefined,
    theme: "dark",
    closeButton: false,
  };

    useEffect(() => {
      const getStudent = async () => {
        setLoading(true);
        const studentToken = await JSON.parse(
          localStorage.getItem("student-token")
        );
        const studentInformation = await fetch("/api/studentTokenData", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            token: studentToken,
          }),
        });
        const studentData = await studentInformation.json();
        if (studentData.status === true) {
          setStudentemail(studentData.studentData.email)
          setEmail(studentData.studentData.email)
          console.log(studentData.studentData.email);
          setLoading(false);
        } else {
          toast.error(" Token Expired, Please Login Again", toastConfig);
          setLoading(false);
        }
      };
      getStudent();
    }, [router.query]);
    const handleClick = async (event) => {
      event.preventDefault();

      setLoading(true);


      if (  !password || !cpassword  ) {
        toast.warning("Please fill all the field !!", toastConfig);
        setTimeout(() => {
            setLoading(false);
        }, 3000);
        return;
      }
      if (password !== cpassword) {
        toast.warning("Password do not match !!", toastConfig);
        setTimeout(() => {
          setLoading(false);
      }, 3000);
        return;
      }
      try {
        const data = await fetch("/api/userupdate", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
          password,email
          }),
        });
        let response = await data.json();
        if (response.success === true) {
          toast.success("Password Changed successfully !!", toastConfig);
         setTimeout(() => {
          router.push("/complain")
         }, 2000);
         setTimeout(() => {
          setLoading(false);
      }, 3000);
        }
  
        else {
          toast.error("Password Can't Changed  !!", toastConfig);
          setTimeout(() => {
            setLoading(false);
        }, 3000);
        }
      } catch (error) {
        toast.error("Password Can't Changed  !!",toastConfig);
        setTimeout(() => {
          setLoading(false);
      }, 3000);
        console.log(error);
      }
    }



  return (
    <>
    <Head>
           <title>SPEAK-UP : STUDENT </title>
           <meta
             name="description"
             content="Generated by developer for the who needs to be thier doubts and want to learn from the expert"
           />
           <link rel="icon" href="/neev.png" />
         </Head>
    <div className="flex items-center justify-center flex-col w-full h-full from-slate-600 bg-gradient-to-t">
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        pauseOnHover
        theme="light"
      />
      <div className="bg-green-900 rounded p-2 px-5 absolute top-[5rem] z-10">
        <h1 className="text-white text-3xl uppercase">UPDATE PROFILE</h1>
      </div>
      <div className="border-4 border-white p-5 relative rounded bg-white/30 w-[30rem] shadow-3xl mb-[5.3rem]">
        <div className="flex items-center justify-center mt-9">
          <img src="/images/logo2.png " className="w-[12rem]" />
        </div>
        <form className="flex items-center justify-center flex-col ">
          <div className="relative">
            <div className="relative mb-6 ">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <i className="fa-solid fa-envelope  text-green-900 text-3xl"></i>
              </div>
              <div className="absolute w-[2px] h-[36px] bg-green-700 top-[10px] bottom-[2rem] left-[52px]"></div>
              <input
                type="email"
                id="email"
                name="email"
                className="text-green-800 cursor-not-allowed rounded-lg block w-[24rem] text-2xl pl-[4rem] p-3 dark:placeholder:text-green-900 bg-white dark:text-green-900 outline-none"
                placeholder="Your Email"
                value={studentemail}
                
                disabled
              />
            </div>
          </div>
          <div className="relative">
            <div className="relative mb-5 ">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <i className=" fa-solid fa-lock  text-green-900 text-3xl"></i>
              </div>
              <div className="absolute w-[2px] h-[36px] bg-green-700 top-[10px] bottom-[2rem] left-[52px]"></div>
              <input
                type="password"
                id="password"
                name="password"
                className="text-green-800  rounded-lg block w-[24rem] text-2xl pl-[4rem] p-3 dark:placeholder:text-green-900 bg-white dark:text-green-900 outline-none"
                placeholder="New Password"
                autoComplete="off"
                required
                onChange={(e) => {
                  setPassword(e.target.value);
                }}
              />
            </div>
            
          </div>
          <div className="relative">
            <div className="relative mb-7 ">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <i className=" fa-solid fa-lock  text-green-900 text-3xl"></i>
              </div>
              <div className="absolute w-[2px] h-[36px] bg-green-700 top-[10px] bottom-[2rem] left-[52px]"></div>
              <input
                type="password"
                id="cpassword"
                name="cpassword"
                className="text-green-800  rounded-lg block w-[24rem] text-2xl pl-[4rem] p-3 dark:placeholder:text-green-900 bg-white dark:text-green-900 outline-none"
                placeholder="Confirm New Password"
                autoComplete="off"
                required
                onChange={(e) => {
                  setCpassword(e.target.value);
                }}
              />
            </div>
            
          </div>
          <button
            type="submit"
            className="bg-green-900 w-[15rem] hover:bg-green-800 shadow-4xl  transition-all duration-300 text-white h-[3.8rem] cursor-pointer rounded text-3xl  flex items-center justify-center"
            onClick={handleClick}
          >
            {loading ? (
              <img
                className="w-[3rem] h-[3rem]"
                src="/loader/loaderstudent.gif"
              />
            ) : (
              "Update"
            )}
          </button>
        </form>
      </div>
    </div>
    </>
  )
}

export default userUpdate